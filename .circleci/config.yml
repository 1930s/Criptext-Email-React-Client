# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:7.10
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/mongo:3.4.4

    working_directory: ~/Criptext-Email-React-Client
    
    dependencies:
      pre:
        - echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "email_composer/package.json" }}
          - v2-dependencies-{{ checksum "email_mailbox/package.json" }}
          - v3-dependencies-{{ checksum "email_dialog/package.json" }}
          - v4-dependencies-{{ checksum "email_login/package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
          - v2-dependencies-
          - v3-dependencies-
          - v4-dependencies-

      - run: cd email_composer/ && yarn install

      - run: cd email_mailbox/ && yarn install

      - run: cd email_dialog/ && yarn install

      - run: cd email_login/ && yarn install

      - run: cd electron_app/ && yarn install

      - save_cache:
          paths:
            - email_composer/node_modules
            - email_dialog/node_modules
            - email_login/node_modules
            - email_mailbox/node_modules
          key: v2-dependencies-{{ checksum "email_mailbox/package.json" }}
        
      # run tests!
      - checkout
      - run: 
          name: Composer Build
          command: cd email_composer/ &&  yarn build

      - run:
          name: Composer Unit test
          command: cd email_composer/ && yarn test

      - run:
          name: Composer Lint
          command: cd email_composer/ && yarn lint

      - run: 
          name: Dialog Build
          command: cd email_dialog/ &&  yarn build

      - run:
          name: Dialog Lint
          command: cd email_dialog/ && yarn lint

      - run: 
          name: Login Build
          command: cd email_login/ &&  yarn build

      - run:
          name: Login Unit test
          command: cd email_login/ && yarn test

      - run:
          name: Login Lint
          command: cd email_login/ && yarn lint

      - run: 
          name: Mailbox Build
          command: cd email_mailbox/ &&  yarn build

      - run:
          name: Mailbox Unit test
          command: cd email_mailbox/ && yarn test

      - run:
          name: Mailbox Lint
          command: cd email_mailbox/ && yarn lint

      - run:
          name: Electron Lint
          command: cd electron_app/ && yarn lint

      - run:
          name: Electron Integration
          command: cd electron_app/ && yarn integration 
